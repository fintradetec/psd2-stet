/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.Access
import org.joda.time.DateTime
import io.swagger.client.model.ErrorModel
import io.swagger.client.model.HalAccounts
import io.swagger.client.model.HalBalances
import io.swagger.client.model.HalBeneficiaries
import io.swagger.client.model.HalTransactions
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object AISPApi {

  /**
   * &lt;h3&gt;Description&lt;/h3&gt;   This call returns a set of balances for a given PSU account that is specified by the AISP through an account resource Identification   &lt;ul&gt;     &lt;li&gt;The ASPSP must provide at least the accounting balance on the account.&lt;/li&gt;     &lt;li&gt;The ASPSP can provide other balance restitutions, e.g. instant balance, as well, if possible.&lt;/li&gt;     &lt;li&gt;Actually, from the PSD2 perspective, any other balances that are provided through the Web-Banking service of the ASPSP must also be provided by this ASPSP through the API.&lt;/li&gt;   &lt;/ul&gt; &lt;h3&gt;Prerequisites&lt;/h3&gt;   &lt;ul&gt;     &lt;li&gt;The TPP has been registered by the Registration Authority for the AISP role&lt;/li&gt;     &lt;li&gt;The TPP and the PSU have a contract that has been enrolled by the ASPSP     &lt;ul style&#x3D;\&quot;list-style-type:circle;\&quot;&gt;       &lt;li&gt;At this step, the ASPSP has delivered an OAUTH2 &amp;ldquo;Authorization Code&amp;rdquo; or &amp;ldquo;Resource Owner Password&amp;rdquo; access token to the TPP (cf. &amp;sect; 3.4.2).&lt;/li&gt;     &lt;/ul&gt;     &lt;/li&gt;     &lt;li&gt;The TPP and the ASPSP have successfully processed a mutual check and authentication&lt;/li&gt;     &lt;li&gt;The TPP has presented its OAUTH2 &amp;ldquo;Authorization Code&amp;rdquo; or &amp;ldquo;Resource Owner Password&amp;rdquo; access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. &amp;sect; 3.4.2) if any.&lt;/li&gt;     &lt;li&gt;The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.&lt;/li&gt;     &lt;li&gt;The TPP has previously retrieved the list of available accounts for the PSU&lt;/li&gt;   &lt;/ul&gt; &lt;h3&gt;Business flow&lt;/h3&gt;   The AISP requests the ASPSP on one of the PSU&amp;rsquo;s accounts.&lt;br /&gt;   The ASPSP answers by providing a list of balances on this account.   &lt;ul&gt;     &lt;li&gt;The ASPSP must provide at least the accounting balance on the account.&lt;/li&gt;     &lt;li&gt;The ASPSP can provide other balance restitutions, e.g. instant balance, as well, if possible.&lt;/li&gt;     &lt;li&gt;Actually, from the PSD2 perspective, any other balances that are provided through the Web-Banking service of the ASPSP must also be provided by this ASPSP through the API.&lt;/li&gt;   &lt;/ul&gt; 
   * 
   * Expected answers:
   *   code 200 : HalBalances (The ASPSP answers with a list of account balances)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 204 :  (No content.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 400 : ErrorModel (Invalid status value)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 401 : ErrorModel (Unauthorized, authentication failure.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 403 : ErrorModel (Forbidden, authentication successful but access to resource is not allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 404 : ErrorModel (Not found, no request available.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 405 : ErrorModel (Method Not Allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 406 : ErrorModel (Not Acceptable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 408 : ErrorModel (Request Timeout.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 429 : ErrorModel (Too many requests.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 500 : ErrorModel (Internal server error.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 503 : ErrorModel (Service unavailable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   * 
   * @param authorization Access token to be passed as a header
   * @param accountResourceId Identification of account resource to fetch
   * @param signature http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate. 
   * @param xRequestID Correlation header to be set in a request and retrieved in the relevant response 
   * @param pSUIPAddress IP address used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUIPPort IP port used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUHTTPMethod Http method for the most relevant PSU’s terminal request to the TTP
   * @param pSUDate Timestamp of the most relevant PSU’s terminal request to the TTP
   * @param pSUGEOLocation Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP
   * @param pSUUserAgent \&quot;User-Agent\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUReferer \&quot;Referer\&quot; header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \&quot;referer\&quot; (incorrect spelling) is to be used. The correct spelling \&quot;referrer\&quot; can be used but might not be understood. 
   * @param pSUAccept \&quot;Accept\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptCharset \&quot;Accept-Charset\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptEncoding \&quot;Accept-Encoding\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptLanguage \&quot;Accept-Language\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of installation identification this ID need to be unaltered until removal from device. 
   * @param digest Digest of the body
   */
  def accountsBalancesGet(authorization: String, accountResourceId: String, signature: String, xRequestID: String, pSUIPAddress: Option[String] = None, pSUIPPort: Option[String] = None, pSUHTTPMethod: Option[String] = None, pSUDate: Option[String] = None, pSUGEOLocation: Option[String] = None, pSUUserAgent: Option[String] = None, pSUReferer: Option[String] = None, pSUAccept: Option[String] = None, pSUAcceptCharset: Option[String] = None, pSUAcceptEncoding: Option[String] = None, pSUAcceptLanguage: Option[String] = None, pSUDeviceID: Option[String] = None, digest: Option[String] = None): ApiRequest[HalBalances] =
    ApiRequest[HalBalances](ApiMethods.GET, "https://localhost/v1", "/accounts/{accountResourceId}/balances", "application/json")
      .withPathParam("accountResourceId", accountResourceId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("PSU-IP-Address", pSUIPAddress)
      .withHeaderParam("PSU-IP-Port", pSUIPPort)
      .withHeaderParam("PSU-HTTP-Method", pSUHTTPMethod)
      .withHeaderParam("PSU-Date", pSUDate)
      .withHeaderParam("PSU-GEO-Location", pSUGEOLocation)
      .withHeaderParam("PSU-User-Agent", pSUUserAgent)
      .withHeaderParam("PSU-Referer", pSUReferer)
      .withHeaderParam("PSU-Accept", pSUAccept)
      .withHeaderParam("PSU-Accept-Charset", pSUAcceptCharset)
      .withHeaderParam("PSU-Accept-Encoding", pSUAcceptEncoding)
      .withHeaderParam("PSU-Accept-Language", pSUAcceptLanguage)
      .withHeaderParam("PSU-Device-ID", pSUDeviceID)
      .withHeaderParam("Digest", digest)
      .withHeaderParam("Signature", signature)
      .withHeaderParam("X-Request-ID", xRequestID)
      .withSuccessResponse[HalBalances](200)
      .withErrorResponse[Unit](204)
      .withErrorResponse[ErrorModel](400)
      .withErrorResponse[ErrorModel](401)
      .withErrorResponse[ErrorModel](403)
      .withErrorResponse[ErrorModel](404)
      .withErrorResponse[ErrorModel](405)
      .withErrorResponse[ErrorModel](406)
      .withErrorResponse[ErrorModel](408)
      .withErrorResponse[ErrorModel](429)
      .withErrorResponse[ErrorModel](500)
      .withErrorResponse[ErrorModel](503)
      
  object AccountsBalancesGetHeaders { 
    def xRequestID(r: ApiReturnWithHeaders) = r.getStringHeader("X-Request-ID")
  }
  /**
   * &lt;h3&gt;Description&lt;/h3&gt;   This call returns all payment accounts that are relevant the PSU on behalf of whom the AISP is connected.   Thanks to HYPERMEDIA, each account is returned with the links aiming to ease access to the relevant transactions and balances.   The result may be subject to pagination (i.e. retrieving a partial result in case of having too many results) through a set of pages by the ASPSP. Thereafter, the AISP may ask for the first, next, previous or last page of results. &lt;h3&gt;Prerequisites&lt;/h3&gt;   &lt;ul&gt;     &lt;li&gt;The TPP has been registered by the Registration Authority for the AISP role.&lt;/li&gt;     &lt;li&gt;The TPP and the PSU have a contract that has been enrolled by the ASPSP&lt;/li&gt;       &lt;ul&gt;         &lt;li&gt;At this step, the ASPSP has delivered an OAUTH2 \&quot;Authorization Code\&quot; or \&quot;Resource Owner Password\&quot; access token to the TPP (cf. § 3.4.2).&lt;/li&gt;       &lt;/ul&gt;     &lt;li&gt;The TPP and the ASPSP have successfully processed a mutual check and authentication&lt;/li&gt;     &lt;li&gt;The TPP has presented its OAUTH2 \&quot;Authorization Code\&quot; or \&quot;Resource Owner Password\&quot; access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. § 3.4.2) if any.&lt;/li&gt;     &lt;li&gt;The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.&lt;/li&gt;   &lt;/ul&gt; &lt;h3&gt;Business Flow&lt;/h3&gt;   The TPP sends a request to the ASPSP for retrieving the list of the PSU payment accounts.   The ASPSP computes the relevant PSU accounts and builds the answer as an accounts list.    The result may be subject to pagination in order to avoid an excessive result set.    Each payment account will be provided with its characteristics. 
   * 
   * Expected answers:
   *   code 200 : HalAccounts (The ASPSP return a PSU context  - listing the accounts that have been made available to the AISP by the PSU and,  - for each of these accounts, the further transactions that have been enabled by the PSU through HYPERMEDIA links. )
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 204 :  (No content.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 401 : ErrorModel (Unauthorized, authentication failure.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 403 : ErrorModel (Forbidden, authentication successful but access to resource is not allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 404 : ErrorModel (Not found, no request available.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 405 : ErrorModel (Method Not Allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 406 : ErrorModel (Not Acceptable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 408 : ErrorModel (Request Timeout.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 429 : ErrorModel (Too many requests.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 500 : ErrorModel (Internal server error.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 503 : ErrorModel (Service unavailable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   * 
   * @param authorization Access token to be passed as a header
   * @param signature http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate. 
   * @param xRequestID Correlation header to be set in a request and retrieved in the relevant response 
   * @param pSUIPAddress IP address used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUIPPort IP port used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUHTTPMethod Http method for the most relevant PSU’s terminal request to the TTP
   * @param pSUDate Timestamp of the most relevant PSU’s terminal request to the TTP
   * @param pSUGEOLocation Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP
   * @param pSUUserAgent \&quot;User-Agent\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUReferer \&quot;Referer\&quot; header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \&quot;referer\&quot; (incorrect spelling) is to be used. The correct spelling \&quot;referrer\&quot; can be used but might not be understood. 
   * @param pSUAccept \&quot;Accept\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptCharset \&quot;Accept-Charset\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptEncoding \&quot;Accept-Encoding\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptLanguage \&quot;Accept-Language\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of installation identification this ID need to be unaltered until removal from device. 
   * @param digest Digest of the body
   */
  def accountsGet(authorization: String, signature: String, xRequestID: String, pSUIPAddress: Option[String] = None, pSUIPPort: Option[String] = None, pSUHTTPMethod: Option[String] = None, pSUDate: Option[String] = None, pSUGEOLocation: Option[String] = None, pSUUserAgent: Option[String] = None, pSUReferer: Option[String] = None, pSUAccept: Option[String] = None, pSUAcceptCharset: Option[String] = None, pSUAcceptEncoding: Option[String] = None, pSUAcceptLanguage: Option[String] = None, pSUDeviceID: Option[String] = None, digest: Option[String] = None): ApiRequest[HalAccounts] =
    ApiRequest[HalAccounts](ApiMethods.GET, "https://localhost/v1", "/accounts", "application/json")
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("PSU-IP-Address", pSUIPAddress)
      .withHeaderParam("PSU-IP-Port", pSUIPPort)
      .withHeaderParam("PSU-HTTP-Method", pSUHTTPMethod)
      .withHeaderParam("PSU-Date", pSUDate)
      .withHeaderParam("PSU-GEO-Location", pSUGEOLocation)
      .withHeaderParam("PSU-User-Agent", pSUUserAgent)
      .withHeaderParam("PSU-Referer", pSUReferer)
      .withHeaderParam("PSU-Accept", pSUAccept)
      .withHeaderParam("PSU-Accept-Charset", pSUAcceptCharset)
      .withHeaderParam("PSU-Accept-Encoding", pSUAcceptEncoding)
      .withHeaderParam("PSU-Accept-Language", pSUAcceptLanguage)
      .withHeaderParam("PSU-Device-ID", pSUDeviceID)
      .withHeaderParam("Digest", digest)
      .withHeaderParam("Signature", signature)
      .withHeaderParam("X-Request-ID", xRequestID)
      .withSuccessResponse[HalAccounts](200)
      .withErrorResponse[Unit](204)
      .withErrorResponse[ErrorModel](401)
      .withErrorResponse[ErrorModel](403)
      .withErrorResponse[ErrorModel](404)
      .withErrorResponse[ErrorModel](405)
      .withErrorResponse[ErrorModel](406)
      .withErrorResponse[ErrorModel](408)
      .withErrorResponse[ErrorModel](429)
      .withErrorResponse[ErrorModel](500)
      .withErrorResponse[ErrorModel](503)
      
  object AccountsGetHeaders { 
    def xRequestID(r: ApiReturnWithHeaders) = r.getStringHeader("X-Request-ID")
  }
  /**
   * &lt;h3&gt;Description&lt;/h3&gt;   This call returns transactions for an account for a given PSU account that is specified by the AISP through an account resource identification.   The request may use some filter parameter in order to restrict the query    &lt;ul&gt;     &lt;li&gt;on a given imputation date range&lt;/li&gt;     &lt;li&gt;past a given incremental technical identification&lt;/li&gt;   &lt;/ul&gt;   The result may be subject to pagination (i.e. retrieving a partial result in case of having too many results) through a set of pages by the ASPSP. Thereafter, the AISP may ask for the first, next, previous or last page of results. &lt;h3&gt;Prerequisites&lt;/h3&gt;   &lt;ul&gt;     &lt;li&gt;The TPP has been registered by the Registration Authority for the AISP role&lt;/li&gt;     &lt;li&gt;The TPP and the PSU have a contract that has been enrolled by the ASPSP&lt;/li&gt;     &lt;ul&gt;       &lt;li&gt;At this step, the ASPSP has delivered an OAUTH2 \&quot;Authorization Code\&quot; or \&quot;Resource Owner Password\&quot; access token to the TPP (cf. § 3.4.2).&lt;/li&gt;     &lt;/ul&gt;     &lt;li&gt;The TPP and the ASPSP have successfully processed a mutual check and authentication &lt;/li&gt;     &lt;li&gt;The TPP has presented its OAUTH2 \&quot;Authorization Code\&quot; or \&quot;Resource Owner Password\&quot; access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. § 3.4.2) is any.&lt;/li&gt;     &lt;li&gt;The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.&lt;/li&gt;     &lt;li&gt;The TPP has previously retrieved the list of available accounts for the PSU&lt;/li&gt;   &lt;/ul&gt; &lt;h3&gt;Business flow&lt;/h3&gt;   The AISP requests the ASPSP on one of the PSU’s accounts. It may specify some selection criteria.   The ASPSP answers by a set of transactions that matches the query. The result may be subject to pagination in order to avoid an excessive result set. 
   * 
   * Expected answers:
   *   code 200 : HalTransactions (Complete transactions response)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 204 :  (No content.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 400 : ErrorModel (Invalid status value)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 401 : ErrorModel (Unauthorized, authentication failure.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 403 : ErrorModel (Forbidden, authentication successful but access to resource is not allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 404 : ErrorModel (Not found, no request available.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 405 : ErrorModel (Method Not Allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 406 : ErrorModel (Not Acceptable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 408 : ErrorModel (Request Timeout.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 429 : ErrorModel (Too many requests.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 500 : ErrorModel (Internal server error.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 503 : ErrorModel (Service unavailable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   * 
   * @param authorization Access token to be passed as a header
   * @param accountResourceId Identification of account resource to fetch
   * @param signature http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate. 
   * @param xRequestID Correlation header to be set in a request and retrieved in the relevant response 
   * @param dateFrom Inclusive minimal imputation date of the transactions.         Transactions having an imputation date equal to this parameter are included within the result. 
   * @param dateTo Exclusive maximal imputation date of the transactions.         Transactions having an imputation date equal to this parameter are not included within the result. 
   * @param afterEntryReference Specifies the value on which the result has to be computed.         Only the transaction having a technical identification greater than this value must be included within the result 
   * @param pSUIPAddress IP address used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUIPPort IP port used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUHTTPMethod Http method for the most relevant PSU’s terminal request to the TTP
   * @param pSUDate Timestamp of the most relevant PSU’s terminal request to the TTP
   * @param pSUGEOLocation Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP
   * @param pSUUserAgent \&quot;User-Agent\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUReferer \&quot;Referer\&quot; header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \&quot;referer\&quot; (incorrect spelling) is to be used. The correct spelling \&quot;referrer\&quot; can be used but might not be understood. 
   * @param pSUAccept \&quot;Accept\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptCharset \&quot;Accept-Charset\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptEncoding \&quot;Accept-Encoding\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptLanguage \&quot;Accept-Language\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of installation identification this ID need to be unaltered until removal from device. 
   * @param digest Digest of the body
   */
  def accountsTransactionsGet(authorization: String, accountResourceId: String, signature: String, xRequestID: String, dateFrom: Option[DateTime] = None, dateTo: Option[DateTime] = None, afterEntryReference: Option[String] = None, pSUIPAddress: Option[String] = None, pSUIPPort: Option[String] = None, pSUHTTPMethod: Option[String] = None, pSUDate: Option[String] = None, pSUGEOLocation: Option[String] = None, pSUUserAgent: Option[String] = None, pSUReferer: Option[String] = None, pSUAccept: Option[String] = None, pSUAcceptCharset: Option[String] = None, pSUAcceptEncoding: Option[String] = None, pSUAcceptLanguage: Option[String] = None, pSUDeviceID: Option[String] = None, digest: Option[String] = None): ApiRequest[HalTransactions] =
    ApiRequest[HalTransactions](ApiMethods.GET, "https://localhost/v1", "/accounts/{accountResourceId}/transactions", "application/json")
      .withQueryParam("dateFrom", dateFrom)
      .withQueryParam("dateTo", dateTo)
      .withQueryParam("afterEntryReference", afterEntryReference)
      .withPathParam("accountResourceId", accountResourceId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("PSU-IP-Address", pSUIPAddress)
      .withHeaderParam("PSU-IP-Port", pSUIPPort)
      .withHeaderParam("PSU-HTTP-Method", pSUHTTPMethod)
      .withHeaderParam("PSU-Date", pSUDate)
      .withHeaderParam("PSU-GEO-Location", pSUGEOLocation)
      .withHeaderParam("PSU-User-Agent", pSUUserAgent)
      .withHeaderParam("PSU-Referer", pSUReferer)
      .withHeaderParam("PSU-Accept", pSUAccept)
      .withHeaderParam("PSU-Accept-Charset", pSUAcceptCharset)
      .withHeaderParam("PSU-Accept-Encoding", pSUAcceptEncoding)
      .withHeaderParam("PSU-Accept-Language", pSUAcceptLanguage)
      .withHeaderParam("PSU-Device-ID", pSUDeviceID)
      .withHeaderParam("Digest", digest)
      .withHeaderParam("Signature", signature)
      .withHeaderParam("X-Request-ID", xRequestID)
      .withSuccessResponse[HalTransactions](200)
      .withErrorResponse[Unit](204)
      .withErrorResponse[ErrorModel](400)
      .withErrorResponse[ErrorModel](401)
      .withErrorResponse[ErrorModel](403)
      .withErrorResponse[ErrorModel](404)
      .withErrorResponse[ErrorModel](405)
      .withErrorResponse[ErrorModel](406)
      .withErrorResponse[ErrorModel](408)
      .withErrorResponse[ErrorModel](429)
      .withErrorResponse[ErrorModel](500)
      .withErrorResponse[ErrorModel](503)
      
  object AccountsTransactionsGetHeaders { 
    def xRequestID(r: ApiReturnWithHeaders) = r.getStringHeader("X-Request-ID")
  }
  /**
   * &lt;h3&gt;Description&lt;/h3&gt;   In the mixed detailed consent on accounts   &lt;ul&gt;     &lt;li&gt;the AISP captures the consent of the PSU&lt;/li&gt;     &lt;li&gt;then it forwards this consent to the ASPSP&lt;/li&gt;   &lt;/ul&gt;   This consent replaces any prior consent that was previously sent by the AISP. &lt;h3&gt;Prerequisites&lt;/h3&gt;   &lt;ul&gt;     &lt;li&gt;The TPP has been registered by the Registration Authority for the AISP role.&lt;/li&gt;     &lt;li&gt;The TPP and the PSU have a contract that has been enrolled by the ASPSP&lt;/li&gt;       &lt;ul&gt;       &lt;li&gt;At this step, the ASPSP has delivered an OAUTH2 \&quot;Authorization Code\&quot; or \&quot;Resource Owner Password\&quot; access token to the TPP (cf. § 3.4.2).&lt;/li&gt;       &lt;/ul&gt;     &lt;li&gt;The TPP and the ASPSP have successfully processed a mutual check and authentication&lt;/li&gt;     &lt;li&gt;The TPP has presented its OAUTH2 \&quot;Authorization Code\&quot; or \&quot;Resource Owner Password\&quot; access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. § 3.4.2) if any.&lt;/li&gt;     &lt;li&gt;The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.&lt;/li&gt;   &lt;/ul&gt; &lt;h3&gt;Business Flow&lt;/h3&gt;   The PSU specifies to the AISP which of his/her accounts will be accessible and which functionalities should be available.   The AISP forwards these settings to the ASPSP.   The ASPSP answers by HTTP201 return code. 
   * 
   * Expected answers:
   *   code 201 :  (Created)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 400 : ErrorModel (Invalid status value)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 401 : ErrorModel (Unauthorized, authentication failure.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 403 : ErrorModel (Forbidden, authentication successful but access to resource is not allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 405 : ErrorModel (Method Not Allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 406 : ErrorModel (Not Acceptable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 408 : ErrorModel (Request Timeout.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 429 : ErrorModel (Too many requests.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 500 : ErrorModel (Internal server error.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 503 : ErrorModel (Service unavailable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   * 
   * @param authorization Access token to be passed as a header
   * @param signature http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate. 
   * @param xRequestID Correlation header to be set in a request and retrieved in the relevant response 
   * @param access List of consents granted to the AISP by the PSU.
   * @param pSUIPAddress IP address used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUIPPort IP port used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUHTTPMethod Http method for the most relevant PSU’s terminal request to the TTP
   * @param pSUDate Timestamp of the most relevant PSU’s terminal request to the TTP
   * @param pSUGEOLocation Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP
   * @param pSUUserAgent \&quot;User-Agent\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUReferer \&quot;Referer\&quot; header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \&quot;referer\&quot; (incorrect spelling) is to be used. The correct spelling \&quot;referrer\&quot; can be used but might not be understood. 
   * @param pSUAccept \&quot;Accept\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptCharset \&quot;Accept-Charset\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptEncoding \&quot;Accept-Encoding\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptLanguage \&quot;Accept-Language\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of installation identification this ID need to be unaltered until removal from device. 
   * @param digest Digest of the body
   */
  def consentsPut(authorization: String, signature: String, xRequestID: String, access: Option[Access] = None, pSUIPAddress: Option[String] = None, pSUIPPort: Option[String] = None, pSUHTTPMethod: Option[String] = None, pSUDate: Option[String] = None, pSUGEOLocation: Option[String] = None, pSUUserAgent: Option[String] = None, pSUReferer: Option[String] = None, pSUAccept: Option[String] = None, pSUAcceptCharset: Option[String] = None, pSUAcceptEncoding: Option[String] = None, pSUAcceptLanguage: Option[String] = None, pSUDeviceID: Option[String] = None, digest: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.PUT, "https://localhost/v1", "/consents", "application/json")
      .withBody(access)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("PSU-IP-Address", pSUIPAddress)
      .withHeaderParam("PSU-IP-Port", pSUIPPort)
      .withHeaderParam("PSU-HTTP-Method", pSUHTTPMethod)
      .withHeaderParam("PSU-Date", pSUDate)
      .withHeaderParam("PSU-GEO-Location", pSUGEOLocation)
      .withHeaderParam("PSU-User-Agent", pSUUserAgent)
      .withHeaderParam("PSU-Referer", pSUReferer)
      .withHeaderParam("PSU-Accept", pSUAccept)
      .withHeaderParam("PSU-Accept-Charset", pSUAcceptCharset)
      .withHeaderParam("PSU-Accept-Encoding", pSUAcceptEncoding)
      .withHeaderParam("PSU-Accept-Language", pSUAcceptLanguage)
      .withHeaderParam("PSU-Device-ID", pSUDeviceID)
      .withHeaderParam("Digest", digest)
      .withHeaderParam("Signature", signature)
      .withHeaderParam("X-Request-ID", xRequestID)
      .withSuccessResponse[Unit](201)
      .withErrorResponse[ErrorModel](400)
      .withErrorResponse[ErrorModel](401)
      .withErrorResponse[ErrorModel](403)
      .withErrorResponse[ErrorModel](405)
      .withErrorResponse[ErrorModel](406)
      .withErrorResponse[ErrorModel](408)
      .withErrorResponse[ErrorModel](429)
      .withErrorResponse[ErrorModel](500)
      .withErrorResponse[ErrorModel](503)
      
  object ConsentsPutHeaders { 
    def xRequestID(r: ApiReturnWithHeaders) = r.getStringHeader("X-Request-ID")
  }
  /**
   * &lt;h3&gt;Description&lt;/h3&gt;   This call returns all trusted beneficiaries that have been set by the PSU.   Those beneficiaries can benefit from an SCA exemption during payment initiation.   The result may be subject to pagination (i.e. retrieving a partial result in case of having too many results) through a set of pages by the ASPSP. Thereafter, the AISP may ask for the first, next, previous or last page of results. &lt;h3&gt;Prerequisites&lt;/h3&gt;   &lt;ul&gt;     &lt;li&gt;The TPP has been registered by the Registration Authority for the AISP role.&lt;/li&gt;     &lt;li&gt;The TPP and the PSU have a contract that has been enrolled by the ASPSP&lt;/li&gt;       &lt;ul&gt;         &lt;li&gt;At this step, the ASPSP has delivered an OAUTH2 \&quot;Authorization Code\&quot; or \&quot;Resource Owner Password\&quot; access token to the TPP (cf. § 3.4.2).&lt;/li&gt;       &lt;/ul&gt;     &lt;li&gt;The TPP and the ASPSP have successfully processed a mutual check and authentication&lt;/li&gt;     &lt;li&gt;The TPP has presented its OAUTH2 \&quot;Authorization Code\&quot; or \&quot;Resource Owner Password\&quot; access token which allows the ASPSP to identify the relevant PSU and retrieve the linked PSU context (cf. § 3.4.2) if any.&lt;/li&gt;     &lt;li&gt;The ASPSP takes into account the access token that establishes the link between the PSU and the AISP.&lt;/li&gt;   &lt;/ul&gt; &lt;h3&gt;Business Flow&lt;/h3&gt;   The AISP asks for the trusted beneficiaries list.   The ASPSP answers with a list of beneficiary details structure. 
   * 
   * Expected answers:
   *   code 200 : HalBeneficiaries (The ASPSP returns the list of whitelisted beneficiaries  )
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 204 :  (No content.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 401 : ErrorModel (Unauthorized, authentication failure.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 403 : ErrorModel (Forbidden, authentication successful but access to resource is not allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 404 : ErrorModel (Not found, no request available.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 405 : ErrorModel (Method Not Allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 406 : ErrorModel (Not Acceptable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 429 : ErrorModel (Too many requests.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 500 : ErrorModel (Internal server error.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   * 
   * @param authorization Access token to be passed as a header
   * @param signature http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate. 
   * @param xRequestID Correlation header to be set in a request and retrieved in the relevant response 
   * @param pSUIPAddress IP address used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUIPPort IP port used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUHTTPMethod Http method for the most relevant PSU’s terminal request to the TTP
   * @param pSUDate Timestamp of the most relevant PSU’s terminal request to the TTP
   * @param pSUGEOLocation Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP
   * @param pSUUserAgent \&quot;User-Agent\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUReferer \&quot;Referer\&quot; header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \&quot;referer\&quot; (incorrect spelling) is to be used. The correct spelling \&quot;referrer\&quot; can be used but might not be understood. 
   * @param pSUAccept \&quot;Accept\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptCharset \&quot;Accept-Charset\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptEncoding \&quot;Accept-Encoding\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptLanguage \&quot;Accept-Language\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of installation identification this ID need to be unaltered until removal from device. 
   * @param digest Digest of the body
   */
  def trustedBeneficiariesGet(authorization: String, signature: String, xRequestID: String, pSUIPAddress: Option[String] = None, pSUIPPort: Option[String] = None, pSUHTTPMethod: Option[String] = None, pSUDate: Option[String] = None, pSUGEOLocation: Option[String] = None, pSUUserAgent: Option[String] = None, pSUReferer: Option[String] = None, pSUAccept: Option[String] = None, pSUAcceptCharset: Option[String] = None, pSUAcceptEncoding: Option[String] = None, pSUAcceptLanguage: Option[String] = None, pSUDeviceID: Option[String] = None, digest: Option[String] = None): ApiRequest[HalBeneficiaries] =
    ApiRequest[HalBeneficiaries](ApiMethods.GET, "https://localhost/v1", "/trusted-beneficiaries", "application/json")
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("PSU-IP-Address", pSUIPAddress)
      .withHeaderParam("PSU-IP-Port", pSUIPPort)
      .withHeaderParam("PSU-HTTP-Method", pSUHTTPMethod)
      .withHeaderParam("PSU-Date", pSUDate)
      .withHeaderParam("PSU-GEO-Location", pSUGEOLocation)
      .withHeaderParam("PSU-User-Agent", pSUUserAgent)
      .withHeaderParam("PSU-Referer", pSUReferer)
      .withHeaderParam("PSU-Accept", pSUAccept)
      .withHeaderParam("PSU-Accept-Charset", pSUAcceptCharset)
      .withHeaderParam("PSU-Accept-Encoding", pSUAcceptEncoding)
      .withHeaderParam("PSU-Accept-Language", pSUAcceptLanguage)
      .withHeaderParam("PSU-Device-ID", pSUDeviceID)
      .withHeaderParam("Digest", digest)
      .withHeaderParam("Signature", signature)
      .withHeaderParam("X-Request-ID", xRequestID)
      .withSuccessResponse[HalBeneficiaries](200)
      .withErrorResponse[Unit](204)
      .withErrorResponse[ErrorModel](401)
      .withErrorResponse[ErrorModel](403)
      .withErrorResponse[ErrorModel](404)
      .withErrorResponse[ErrorModel](405)
      .withErrorResponse[ErrorModel](406)
      .withErrorResponse[ErrorModel](429)
      .withErrorResponse[ErrorModel](500)
      
  object TrustedBeneficiariesGetHeaders { 
    def xRequestID(r: ApiReturnWithHeaders) = r.getStringHeader("X-Request-ID")
  }


}


/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.ConfirmationResource
import io.swagger.client.model.ErrorModel
import io.swagger.client.model.HalPaymentRequest
import io.swagger.client.model.HalPaymentRequestCreation
import io.swagger.client.model.PaymentRequestResource
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object PISPApi {

  /**
   * &lt;h3&gt;Description&lt;/h3&gt;   The PISP confirms one of the following requests&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;payment request on behalf of a merchant&lt;/li&gt;     &lt;li&gt;transfer request on behalf of the account&#39;s owner&lt;/li&gt;     &lt;li&gt;standing-order request on behalf of the account&#39;s owner&lt;/li&gt;   &lt;/ul&gt;   The ASPSP answers with a status of the relevant request and the subsequent Credit Transfer. &lt;h3&gt;Prerequisites&lt;/h3&gt;   &lt;ul&gt;     &lt;li&gt; The TPP has been registered by the Registration Authority for the PISP role&lt;/li&gt;     &lt;li&gt; The TPP was provided with an OAUTH2 \&quot;Client Credential\&quot; access token by the ASPSP (cf. § 3.4.3).&lt;/li&gt;     &lt;li&gt; The TPP has previously posted a Request which has been saved by the ASPSP (cf. § 4.5.3)&lt;/li&gt;     &lt;ul&gt;       &lt;li&gt;The ASPSP has answered with a location link to the saved Payment Request (cf. § 4.5.4)&lt;/li&gt;       &lt;li&gt; The TPP has retrieved the saved request in order to get the relevant resource Ids (cf. § 4.6).&lt;/li&gt;     &lt;/ul&gt;     &lt;li&gt; The TPP and the ASPSP have successfully processed a mutual check and authentication &lt;/li&gt;     &lt;li&gt; The TPP has presented its \&quot;OAUTH2 Client Credential\&quot; access token &lt;/li&gt;   &lt;/ul&gt; &lt;h3&gt;Business flow&lt;/h3&gt;   Once the PSU has been authenticated, it is the due to the PISP to confirm the Request to the ASPSP in order to complete the process flow.&lt;br&gt;   In REDIRECT and DECOUPLED approach, this confirmation is not a prerequisite to the execution of the Credit Transfer.&lt;br&gt; 
   * 
   * Expected answers:
   *   code 200 : HalPaymentRequest (retrieval of the Payment Request enriched with the status report)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *                Digest - Digest of the body
   *                Signature - http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate. 
   *   code 400 : ErrorModel (Invalid status value)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 401 : ErrorModel (Unauthorized, authentication failure.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 403 : ErrorModel (Forbidden, authentication successful but access to resource is not allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 405 : ErrorModel (Method Not Allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 406 : ErrorModel (Not Acceptable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 408 : ErrorModel (Request Timeout.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 429 : ErrorModel (Too many requests.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 500 : ErrorModel (Internal server error.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 503 : ErrorModel (Service unavailable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   * 
   * @param authorization Access token to be passed as a header
   * @param paymentRequestResourceId Identification of the Payment Request Resource
   * @param signature http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate. 
   * @param xRequestID Correlation header to be set in a request and retrieved in the relevant response 
   * @param confirmationRequest parameters needed for confirmation of the Payment Request, especially in EMBEDDED approach
   * @param pSUIPAddress IP address used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUIPPort IP port used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUHTTPMethod Http method for the most relevant PSU’s terminal request to the TTP
   * @param pSUDate Timestamp of the most relevant PSU’s terminal request to the TTP
   * @param pSUGEOLocation Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP
   * @param pSUUserAgent \&quot;User-Agent\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUReferer \&quot;Referer\&quot; header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \&quot;referer\&quot; (incorrect spelling) is to be used. The correct spelling \&quot;referrer\&quot; can be used but might not be understood. 
   * @param pSUAccept \&quot;Accept\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptCharset \&quot;Accept-Charset\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptEncoding \&quot;Accept-Encoding\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptLanguage \&quot;Accept-Language\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of installation identification this ID need to be unaltered until removal from device. 
   * @param digest Digest of the body
   */
  def paymentRequestConfirmationPost(authorization: String, paymentRequestResourceId: String, signature: String, xRequestID: String, confirmationRequest: Option[ConfirmationResource] = None, pSUIPAddress: Option[String] = None, pSUIPPort: Option[String] = None, pSUHTTPMethod: Option[String] = None, pSUDate: Option[String] = None, pSUGEOLocation: Option[String] = None, pSUUserAgent: Option[String] = None, pSUReferer: Option[String] = None, pSUAccept: Option[String] = None, pSUAcceptCharset: Option[String] = None, pSUAcceptEncoding: Option[String] = None, pSUAcceptLanguage: Option[String] = None, pSUDeviceID: Option[String] = None, digest: Option[String] = None): ApiRequest[HalPaymentRequest] =
    ApiRequest[HalPaymentRequest](ApiMethods.POST, "https://localhost/v1", "/payment-requests/{paymentRequestResourceId}/confirmation", "application/json")
      .withBody(confirmationRequest)
      .withPathParam("paymentRequestResourceId", paymentRequestResourceId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("PSU-IP-Address", pSUIPAddress)
      .withHeaderParam("PSU-IP-Port", pSUIPPort)
      .withHeaderParam("PSU-HTTP-Method", pSUHTTPMethod)
      .withHeaderParam("PSU-Date", pSUDate)
      .withHeaderParam("PSU-GEO-Location", pSUGEOLocation)
      .withHeaderParam("PSU-User-Agent", pSUUserAgent)
      .withHeaderParam("PSU-Referer", pSUReferer)
      .withHeaderParam("PSU-Accept", pSUAccept)
      .withHeaderParam("PSU-Accept-Charset", pSUAcceptCharset)
      .withHeaderParam("PSU-Accept-Encoding", pSUAcceptEncoding)
      .withHeaderParam("PSU-Accept-Language", pSUAcceptLanguage)
      .withHeaderParam("PSU-Device-ID", pSUDeviceID)
      .withHeaderParam("Digest", digest)
      .withHeaderParam("Signature", signature)
      .withHeaderParam("X-Request-ID", xRequestID)
      .withSuccessResponse[HalPaymentRequest](200)
      .withErrorResponse[ErrorModel](400)
      .withErrorResponse[ErrorModel](401)
      .withErrorResponse[ErrorModel](403)
      .withErrorResponse[ErrorModel](405)
      .withErrorResponse[ErrorModel](406)
      .withErrorResponse[ErrorModel](408)
      .withErrorResponse[ErrorModel](429)
      .withErrorResponse[ErrorModel](500)
      .withErrorResponse[ErrorModel](503)
      
  object PaymentRequestConfirmationPostHeaders { 
    def xRequestID(r: ApiReturnWithHeaders) = r.getStringHeader("X-Request-ID")
    def digest(r: ApiReturnWithHeaders) = r.getStringHeader("Digest")
    def signature(r: ApiReturnWithHeaders) = r.getStringHeader("Signature")
  }
  /**
   * &lt;h3&gt;Description&lt;/h3&gt; The PISP sent a Payment/Transfer Request through a POST command.&lt;br&gt;   The ASPSP registered the Payment/Transfer Request, updated if necessary the relevant identifiers in order to avoid duplicates and returned the location of the updated Request.&lt;br&gt;   The PISP got the Payment/Transfer Request that might have been updated with the resource identifiers, the status of the Payment/Transfer Request and the status of the subsequent credit transfer.&lt;br&gt;   The PISP request for the payment cancellation or for some payment instructions cancellation&lt;br&gt;   No other modification of the Payment/Transfer Request is allowed.&lt;br/&gt; &lt;h3&gt;Prerequisites&lt;/h3&gt; &lt;ul&gt;   &lt;li&gt;The TPP was registered by the Registration Authority for the PISP role&lt;/li&gt;   &lt;li&gt;The TPP was provided with an OAUTH2 \&quot;Client Credential\&quot; access token by the ASPSP (cf. § 3.4.3).&lt;/li&gt;   &lt;li&gt;The TPP previously posted a Payment/Transfer Request which was saved by the ASPSP (cf. § 4.5.3)&lt;/li&gt;   &lt;ul&gt;     &lt;li&gt;The ASPSP answered with a location link to the saved Payment/Transfer Request (cf. § 4.5.4)&lt;/li&gt;     &lt;li&gt;The PISP retrieved the saved Payment/Transfer Request (cf. § 4.5.4)&lt;/li&gt;   &lt;/ul&gt;   &lt;li&gt;The TPP and the ASPSP successfully processed a mutual check and authentication &lt;/li&gt;   &lt;li&gt;The TPP presented its \&quot;OAUTH2 Client Credential\&quot; access token.&lt;/li&gt;   &lt;li&gt;The TPP presented the payment/transfer request.&lt;/li&gt;   &lt;li&gt;The PSU was successfully authenticated.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Business flow&lt;/h3&gt; the following cases can be applied: &lt;ul&gt;   &lt;li&gt;Case of a payment with multiple instructions or a standing order, the PISP asks to cancel the whole Payment/Transfer or Standing Order Request including all non-executed payment instructions by setting the [paymentInformationStatus] to \&quot;RJCT\&quot; and the relevant [statusReasonInformation] to \&quot;DS02\&quot; at payment level.&lt;/li&gt;   &lt;li&gt;Case of a payment with multiple instructions, the PISP asks to cancel one or several payment instructions by setting the [transactionStatus] to \&quot;RJCT\&quot; and the relevant [statusReasonInformation] to \&quot;DS02\&quot; at each relevant instruction level.&lt;/li&gt; &lt;/ul&gt; Since the modification request needs a PSU authentication before committing, the modification request includes:&lt;/li&gt;   &lt;ul&gt;     &lt;li&gt;The specification of the authentication approaches that are supported by the PISP (any combination of \&quot;REDIRECT\&quot;, \&quot;EMBEDDED\&quot; and \&quot;DECOUPLED\&quot; values).&lt;/li&gt;     &lt;li&gt;In case of possible REDIRECT or DECOUPLED authentication approach, one or two call-back URLs to be used by the ASPSP at the finalisation of the authentication and consent process :&lt;/li&gt;     &lt;ul&gt;       &lt;li&gt;The first call-back URL will be called by the ASPSP if the Transfer Request is processed without any error or rejection by the PSU&lt;/li&gt;       &lt;li&gt;The second call-back URL is to be used by the ASPSP in case of processing error or rejection by the PSU. Since this second URL is optional, the PISP might not provide it. In this case, the ASPSP will use the same URL for any processing result.&lt;/li&gt;       &lt;li&gt;Both call-back URLS must be used in a TLS-secured request, including mutual authentication based on each party’s TLS certificate.&lt;/li&gt;     &lt;/ul&gt;     &lt;li&gt;In case of possible \&quot;EMBEDDED\&quot; or \&quot;DECOUPLED\&quot; approaches, a PSU identifier that can be processed by the ASPSP for PSU recognition.&lt;/li&gt;   &lt;/ul&gt;   &lt;li&gt;The ASPSP saves the updated Payment/Transfer Request and answers to the PISP. The answer embeds &lt;/li&gt;   &lt;ul&gt;     &lt;li&gt;The specification of the chosen authentication approach taking into account both the PISP and the PSU capabilities.&lt;/li&gt;     &lt;li&gt;In case of chosen REDIRECT authentication approach, the URL to be used by the PISP for redirecting the PSU in order to perform an authentication.&lt;/li&gt;   &lt;/ul&gt; &lt;/ul&gt; &lt;h3&gt;Authentication flows for both use cases&lt;/h3&gt; &lt;h4&gt;Redirect authentication approach &lt;/h4&gt; When the chosen authentication approach within the ASPSP answers is set to \&quot;REDIRECT\&quot;:&lt;br&gt; &lt;ul&gt;   &lt;li&gt;The PISP redirects the PSU to the ASPSP which authenticates the PSU &lt;/li&gt;   &lt;li&gt;The ASPSP asks the PSU to give (or deny) his/her consent to the Payment Request&lt;/li&gt;   &lt;li&gt;The PSU chooses or confirms which of his/her accounts shall be used by the ASPSP for the future Credit Transfer.&lt;/li&gt;   &lt;li&gt;The ASPSP is then able to initiate the subsequent Credit Transfer&lt;/li&gt;   &lt;li&gt;The ASPSP redirects the PSU to the PISP using one of the call-back URLs provided within the posted Payment Request&lt;/li&gt; &lt;/ul&gt; If the PSU neither gives nor denies his/her consent, the Payment Request shall expire and is then rejected to the PISP. The expiration delay is specified by each ASPSP.&lt;br&gt; &lt;h4&gt;Decoupled authentication approach&lt;/h4&gt; When the chosen authentication approach is \&quot;DECOUPLED\&quot;:&lt;br&gt; &lt;ul&gt;   &lt;li&gt;Based on the PSU identifier provided within the Payment Request by the PISP, the ASPSP gives the PSU with the Payment Request details and challenges the PSU for a Strong Customer Authentication on a decoupled device or application.&lt;/li&gt;   &lt;li&gt;The PSU chooses or confirms which of his/her accounts shall be used by the ASPSP for the future Credit Transfer.&lt;/li&gt;   &lt;li&gt;The ASPSP is then able to initiate the subsequent Credit Transfer&lt;/li&gt;   &lt;li&gt;The ASPSP notifies the PISP about the finalisation of the authentication and consent process by using one of the call-back URLs provided within the posted Payment Request&lt;/li&gt; &lt;/ul&gt; If the PSU neither gives nor denies his/her consent, the Payment Request shall expire and is then rejected to the PISP. The expiration delay is specified by each ASPSP.&lt;br&gt; &lt;h4&gt;Embedded authentication approach&lt;/h4&gt; When the chosen authentication approach within the ASPSP answers is set to \&quot;EMBEDDED\&quot;:&lt;br&gt; &lt;ul&gt;   &lt;li&gt;The TPP informs the PSU that a challenge is needed for completing the Payment Request processing. This challenge will be one of the following:&lt;/li&gt;   &lt;ul&gt;     &lt;li&gt;A One-Time-Password sent by the ASPSP to the PSU on a separate device or application.&lt;/li&gt;     &lt;li&gt;A response computed by a specific device on base of a challenge sent by the ASPSP to the PSU on a separate device or application.&lt;/li&gt;   &lt;/ul&gt;   &lt;li&gt;The PSU unlock the device or application through a \&quot;knowledge factor\&quot; and/or an \&quot;inherence factor\&quot; (biometric), retrieves the Payment Request details and processes the data sent by the ASPSP; &lt;/li&gt;   &lt;li&gt;The PSU might choose or confirm which of his/her accounts shall be used by the ASPSP for the future Credit Transfer when the device or application allows it.&lt;/li&gt;   &lt;li&gt;When agreeing the Payment Request, the PSU enters the resulting authentication factor through the PISP interface which will forward it to the ASPSP through a confirmation request (cf. § 4.7)&lt;/li&gt; &lt;/ul&gt; Case of the PSU neither gives nor denies his/her consent, the Payment Request shall expire and is then rejected to the PISP. The expiration delay is specified by each ASPSP.&lt;br&gt; 
   * 
   * Expected answers:
   *   code 200 : HalPaymentRequestCreation (The modification request has been saved. The ASPSP must authenticate the PSU before committing the update.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *                Digest - Digest of the body
   *                Signature - http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate. 
   *   code 400 : ErrorModel (Invalid status value)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 401 : ErrorModel (Unauthorized, authentication failure.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 403 : ErrorModel (Forbidden, authentication successful but access to resource is not allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 404 : ErrorModel (Not found, no request available.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 405 : ErrorModel (Method Not Allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 406 : ErrorModel (Not Acceptable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 408 : ErrorModel (Request Timeout.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 429 : ErrorModel (Too many requests.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 500 : ErrorModel (Internal server error.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 503 : ErrorModel (Service unavailable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   * 
   * @param authorization Access token to be passed as a header
   * @param paymentRequestResourceId Identification of the Payment Request Resource
   * @param paymentRequest ISO20022 based payment Initiation Request
   * @param signature http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate. 
   * @param xRequestID Correlation header to be set in a request and retrieved in the relevant response 
   * @param pSUIPAddress IP address used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUIPPort IP port used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUHTTPMethod Http method for the most relevant PSU’s terminal request to the TTP
   * @param pSUDate Timestamp of the most relevant PSU’s terminal request to the TTP
   * @param pSUGEOLocation Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP
   * @param pSUUserAgent \&quot;User-Agent\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUReferer \&quot;Referer\&quot; header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \&quot;referer\&quot; (incorrect spelling) is to be used. The correct spelling \&quot;referrer\&quot; can be used but might not be understood. 
   * @param pSUAccept \&quot;Accept\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptCharset \&quot;Accept-Charset\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptEncoding \&quot;Accept-Encoding\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptLanguage \&quot;Accept-Language\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of installation identification this ID need to be unaltered until removal from device. 
   * @param digest Digest of the body
   */
  def paymentRequestPut(authorization: String, paymentRequestResourceId: String, paymentRequest: PaymentRequestResource, signature: String, xRequestID: String, pSUIPAddress: Option[String] = None, pSUIPPort: Option[String] = None, pSUHTTPMethod: Option[String] = None, pSUDate: Option[String] = None, pSUGEOLocation: Option[String] = None, pSUUserAgent: Option[String] = None, pSUReferer: Option[String] = None, pSUAccept: Option[String] = None, pSUAcceptCharset: Option[String] = None, pSUAcceptEncoding: Option[String] = None, pSUAcceptLanguage: Option[String] = None, pSUDeviceID: Option[String] = None, digest: Option[String] = None): ApiRequest[HalPaymentRequestCreation] =
    ApiRequest[HalPaymentRequestCreation](ApiMethods.PUT, "https://localhost/v1", "/payment-requests/{paymentRequestResourceId}", "application/json")
      .withBody(paymentRequest)
      .withPathParam("paymentRequestResourceId", paymentRequestResourceId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("PSU-IP-Address", pSUIPAddress)
      .withHeaderParam("PSU-IP-Port", pSUIPPort)
      .withHeaderParam("PSU-HTTP-Method", pSUHTTPMethod)
      .withHeaderParam("PSU-Date", pSUDate)
      .withHeaderParam("PSU-GEO-Location", pSUGEOLocation)
      .withHeaderParam("PSU-User-Agent", pSUUserAgent)
      .withHeaderParam("PSU-Referer", pSUReferer)
      .withHeaderParam("PSU-Accept", pSUAccept)
      .withHeaderParam("PSU-Accept-Charset", pSUAcceptCharset)
      .withHeaderParam("PSU-Accept-Encoding", pSUAcceptEncoding)
      .withHeaderParam("PSU-Accept-Language", pSUAcceptLanguage)
      .withHeaderParam("PSU-Device-ID", pSUDeviceID)
      .withHeaderParam("Digest", digest)
      .withHeaderParam("Signature", signature)
      .withHeaderParam("X-Request-ID", xRequestID)
      .withSuccessResponse[HalPaymentRequestCreation](200)
      .withErrorResponse[ErrorModel](400)
      .withErrorResponse[ErrorModel](401)
      .withErrorResponse[ErrorModel](403)
      .withErrorResponse[ErrorModel](404)
      .withErrorResponse[ErrorModel](405)
      .withErrorResponse[ErrorModel](406)
      .withErrorResponse[ErrorModel](408)
      .withErrorResponse[ErrorModel](429)
      .withErrorResponse[ErrorModel](500)
      .withErrorResponse[ErrorModel](503)
      
  object PaymentRequestPutHeaders { 
    def xRequestID(r: ApiReturnWithHeaders) = r.getStringHeader("X-Request-ID")
    def digest(r: ApiReturnWithHeaders) = r.getStringHeader("Digest")
    def signature(r: ApiReturnWithHeaders) = r.getStringHeader("Signature")
  }
  /**
   * &lt;h3&gt;Description&lt;/h3&gt; The following use cases can be applied: &lt;ul&gt;   &lt;li&gt;retrieval of a payment request on behalf of a merchant&lt;/li&gt;   &lt;li&gt;retrieval of a transfer request on behalf of the account&#39;s owner&lt;/li&gt;   &lt;li&gt;retrieval of a standing-order request on behalf of the account&#39;s owner&lt;/li&gt; &lt;/ul&gt; The PISP has sent a Request through a POST command. &lt;br&gt;   The ASPSP has registered the Request, updated if necessary the relevant identifiers in order to avoid duplicates and returned the location of the updated Request.&lt;br&gt;   The PISP gets the Request that might have been updated with the resource identifiers, the status of the Payment/Transfer Request and the status of the subsequent credit transfer.&lt;br&gt; &lt;h3&gt;Prerequisites&lt;/h3&gt; &lt;ul&gt;   &lt;li&gt;The TPP has been registered by the Registration Authority for the PISP role&lt;/li&gt;   &lt;li&gt;The TPP was provided with an OAUTH2 \&quot;Client Credential\&quot; access token by the ASPSP (cf. § 3.4.3).&lt;/li&gt;   &lt;li&gt;The TPP has previously posted a Request which has been saved by the ASPSP (cf. § 4.5.3)&lt;/li&gt;   &lt;ul&gt;     &lt;li&gt;The ASPSP has answered with a location link to the saved Payment/Transfer Request (cf. § 4.5.4)&lt;/li&gt;   &lt;/ul&gt;   &lt;li&gt;The TPP and the ASPSP have successfully processed a mutual check and authentication &lt;/li&gt;   &lt;li&gt;The TPP has presented its \&quot;OAUTH2 Client Credential\&quot; access token&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Business flow&lt;/h3&gt; The PISP asks to retrieve the Payment/Transfer Request that has been saved by the ASPSP. The PISP uses the location link provided by the ASPSP in response of the posting of this request.&lt;br&gt; The ASPSP returns the previously posted Payment/Transfer Request which is enriched with:&lt;br&gt; &lt;ul&gt;   &lt;li&gt;The resource identifiers given by the ASPSP&lt;/li&gt;   &lt;li&gt;The status information of the Payment Request and of the subsequent credit transfer&lt;/li&gt; &lt;/ul&gt; The status information must be available during at least 30 calendar days after the posting of the Payment Request. However, the ASPSP may increase this availability duration, based on its own rules.&lt;br&gt; 
   * 
   * Expected answers:
   *   code 200 : HalPaymentRequest (Retrieval of the previously posted Payment Request)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *                Digest - Digest of the body
   *                Signature - http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate. 
   *   code 400 : ErrorModel (Invalid status value)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 401 : ErrorModel (Unauthorized, authentication failure.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 403 : ErrorModel (Forbidden, authentication successful but access to resource is not allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 404 : ErrorModel (Not found, no request available.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 405 : ErrorModel (Method Not Allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 406 : ErrorModel (Not Acceptable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 408 : ErrorModel (Request Timeout.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 429 : ErrorModel (Too many requests.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 500 : ErrorModel (Internal server error.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 503 : ErrorModel (Service unavailable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   * 
   * @param authorization Access token to be passed as a header
   * @param paymentRequestResourceId Identification of the Payment Request Resource
   * @param signature http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate. 
   * @param xRequestID Correlation header to be set in a request and retrieved in the relevant response 
   * @param pSUIPAddress IP address used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUIPPort IP port used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUHTTPMethod Http method for the most relevant PSU’s terminal request to the TTP
   * @param pSUDate Timestamp of the most relevant PSU’s terminal request to the TTP
   * @param pSUGEOLocation Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP
   * @param pSUUserAgent \&quot;User-Agent\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUReferer \&quot;Referer\&quot; header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \&quot;referer\&quot; (incorrect spelling) is to be used. The correct spelling \&quot;referrer\&quot; can be used but might not be understood. 
   * @param pSUAccept \&quot;Accept\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptCharset \&quot;Accept-Charset\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptEncoding \&quot;Accept-Encoding\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptLanguage \&quot;Accept-Language\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of installation identification this ID need to be unaltered until removal from device. 
   * @param digest Digest of the body
   */
  def paymentRequestsGet(authorization: String, paymentRequestResourceId: String, signature: String, xRequestID: String, pSUIPAddress: Option[String] = None, pSUIPPort: Option[String] = None, pSUHTTPMethod: Option[String] = None, pSUDate: Option[String] = None, pSUGEOLocation: Option[String] = None, pSUUserAgent: Option[String] = None, pSUReferer: Option[String] = None, pSUAccept: Option[String] = None, pSUAcceptCharset: Option[String] = None, pSUAcceptEncoding: Option[String] = None, pSUAcceptLanguage: Option[String] = None, pSUDeviceID: Option[String] = None, digest: Option[String] = None): ApiRequest[HalPaymentRequest] =
    ApiRequest[HalPaymentRequest](ApiMethods.GET, "https://localhost/v1", "/payment-requests/{paymentRequestResourceId}", "application/json")
      .withPathParam("paymentRequestResourceId", paymentRequestResourceId)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("PSU-IP-Address", pSUIPAddress)
      .withHeaderParam("PSU-IP-Port", pSUIPPort)
      .withHeaderParam("PSU-HTTP-Method", pSUHTTPMethod)
      .withHeaderParam("PSU-Date", pSUDate)
      .withHeaderParam("PSU-GEO-Location", pSUGEOLocation)
      .withHeaderParam("PSU-User-Agent", pSUUserAgent)
      .withHeaderParam("PSU-Referer", pSUReferer)
      .withHeaderParam("PSU-Accept", pSUAccept)
      .withHeaderParam("PSU-Accept-Charset", pSUAcceptCharset)
      .withHeaderParam("PSU-Accept-Encoding", pSUAcceptEncoding)
      .withHeaderParam("PSU-Accept-Language", pSUAcceptLanguage)
      .withHeaderParam("PSU-Device-ID", pSUDeviceID)
      .withHeaderParam("Digest", digest)
      .withHeaderParam("Signature", signature)
      .withHeaderParam("X-Request-ID", xRequestID)
      .withSuccessResponse[HalPaymentRequest](200)
      .withErrorResponse[ErrorModel](400)
      .withErrorResponse[ErrorModel](401)
      .withErrorResponse[ErrorModel](403)
      .withErrorResponse[ErrorModel](404)
      .withErrorResponse[ErrorModel](405)
      .withErrorResponse[ErrorModel](406)
      .withErrorResponse[ErrorModel](408)
      .withErrorResponse[ErrorModel](429)
      .withErrorResponse[ErrorModel](500)
      .withErrorResponse[ErrorModel](503)
      
  object PaymentRequestsGetHeaders { 
    def xRequestID(r: ApiReturnWithHeaders) = r.getStringHeader("X-Request-ID")
    def digest(r: ApiReturnWithHeaders) = r.getStringHeader("Digest")
    def signature(r: ApiReturnWithHeaders) = r.getStringHeader("Signature")
  }
  /**
   * &lt;h3&gt;Description&lt;/h3&gt; The following use cases can be applied: &lt;ul&gt;   &lt;li&gt;payment request on behalf of a merchant&lt;/li&gt;   &lt;li&gt;transfer request on behalf of the account&#39;s owner&lt;/li&gt;   &lt;li&gt;standing-order request on behalf of the account&#39;s owner&lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;Data content&lt;/h4&gt;   A payment request or a transfer request might embed several payment instructions having   &lt;ul&gt;     &lt;li&gt;one single execution date or multiple execution dates&lt;/li&gt;     &lt;ul&gt;       &lt;li&gt;case of one single execution date, this date must be set at the payment level&lt;/li&gt;       &lt;li&gt;case of multiple execution dates, those dates must be set at each payment instruction level&lt;/li&gt;     &lt;/ul&gt;                      &lt;li&gt;one single beneficiary or multiple beneficiaries&lt;/li&gt;     &lt;ul&gt;       &lt;li&gt;case of one single beneficiary, this beneficiary must be set at the payment level&lt;/li&gt;       &lt;li&gt;case of multiple beneficiaries, those beneficiaries must be set at each payment instruction level&lt;/li&gt;     &lt;/ul&gt;                    &lt;/ul&gt;           A standing order request must embed one single payment instruction and must address one single beneficiary.   &lt;ul&gt;     &lt;li&gt;The beneficiary must be set at the payment level&lt;/li&gt;     &lt;li&gt;The standing order specific characteristics (start date, periodicity...) must be set at the instruction level&lt;/li&gt;   &lt;/ul&gt;                  &lt;h4&gt;Prerequisites for all use cases&lt;/h4&gt; &lt;ul&gt;   &lt;li&gt;The TPP has been registered by the Registration Authority for the PISP role&lt;/li&gt;   &lt;li&gt;The TPP was provided with an OAUTH2 \&quot;Client Credential\&quot; access token by the ASPSP (cf. § 3.4.3).&lt;/li&gt;   &lt;li&gt;The TPP and the ASPSP have successfully processed a mutual check and authentication &lt;/li&gt;   &lt;li&gt;The TPP has presented its \&quot;OAUTH2 Client Credential\&quot; access token&lt;/li&gt; &lt;/ul&gt; &lt;h4&gt;Business flow&lt;/h4&gt;   &lt;h5&gt;Payment Request use case&lt;/h5&gt;     The PISP forwards a payment request on behalf of a merchant.&lt;br&gt;     The PSU buys some goods or services on an e-commerce website held by a merchant. Among other payment method, the merchant suggests the use of a PISP service. As there is obviously a contract between the merchant and the PISP, there is no need of such a contract between the PSU and this PISP to initiate the process.&lt;br&gt;     Case of the PSU that chooses to use the PISP service:&lt;br&gt;     &lt;ul&gt;       &lt;li&gt;The merchant forwards the requested payment characteristics to the PISP and redirects the PSU to the PISP portal.&lt;/li&gt;       &lt;li&gt;The PISP requests from the PSU which ASPSP will be used.&lt;/li&gt;       &lt;li&gt;The PISP prepares the Payment Request and sends this request to the ASPSP.&lt;/li&gt;       &lt;li&gt;The Request can embed several payment instructions having different requested execution date.&lt;/li&gt;       &lt;li&gt;The beneficiary, as being the merchant, is set at the payment level.&lt;/li&gt;     &lt;/ul&gt;    &lt;h5&gt;Transfer Request use case&lt;/h5&gt;     The PISP forwards a transfer request on behalf of the owner of the account.     &lt;ul&gt;       &lt;li&gt;The PSU provides the PISP with all information needed for the transfer.&lt;/li&gt;       &lt;li&gt;The PISP prepares the Transfer Request and sends this request to the relevant ASPSP that holds the debtor account.&lt;/li&gt;       &lt;li&gt;The Request can embed several payment instructions having different beneficiaries.&lt;/li&gt;       &lt;li&gt;The requested execution date, as being the same for all instructions, is set at the payment level.&lt;/li&gt;     &lt;/ul&gt;    &lt;h5&gt;Standing Order Request use case&lt;/h5&gt;     The PISP forwards a Standing Order request on behalf of the owner of the account.     &lt;ul&gt;       &lt;li&gt;The PSU provides the PISP with all information needed for the Standing Order.&lt;/li&gt;       &lt;li&gt;The PISP prepares the Standing Order Request and sends this request to the relevant ASPSP that holds the debtor account.&lt;/li&gt;       &lt;li&gt;The Request embeds one single payment instruction with&lt;/li&gt;       &lt;ul&gt;         &lt;li&gt;The requested execution date of the first occurrence&lt;/li&gt;         &lt;li&gt;The requested execution frequency of the payment in order to compute further execution dates&lt;/li&gt;         &lt;li&gt;An execution rule to handle cases when the computed execution dates cannot be processed (e.g. bank holydays)&lt;/li&gt;         &lt;li&gt;An optional end date for closing the standing Order&lt;/li&gt;       &lt;/ul&gt;     &lt;/ul&gt;  &lt;h4&gt;Authentication flows for all use cases&lt;/h4&gt;   As the request posted by the PISP to the ASPSP needs a PSU authentication before execution, this request will include:   &lt;ul&gt;     &lt;li&gt;The specification of the authentication approaches that are supported by the PISP (any combination of \&quot;REDIRECT\&quot;, \&quot;EMBEDDED\&quot; and \&quot;DECOUPLED\&quot; values).&lt;/li&gt;     &lt;li&gt;In case of possible REDIRECT or DECOUPLED authentication approach, one or two call-back URLs to be used by the ASPSP at the finalisation of the authentication and consent process :&lt;/li&gt;     &lt;ul&gt;       &lt;li&gt;The first call-back URL will be called by the ASPSP if the Payment Request is processed without any error or rejection by the PSU&lt;/li&gt;       &lt;li&gt;The second call-back URL is to be used by the ASPSP in case of processing error or rejection by the PSU. Since this second URL is optional, the PISP might not provide it. In this case, the ASPSP will use the same URL for any processing result.&lt;/li&gt;       &lt;li&gt;Both call-back URLS must be used in a TLS-secured request.&lt;/li&gt;     &lt;/ul&gt;     &lt;li&gt;In case of possible \&quot;EMBEDDED\&quot; or \&quot;DECOUPLED\&quot; approaches, the PSU identifier that can be processed by the ASPSP for PSU recognition must have been set within the request body [debtor] structure.&lt;/li&gt;   &lt;/ul&gt;   The ASPSP saves the request and answers to the PISP. The answer embeds:   &lt;ul&gt;     &lt;li&gt;A location link of the saved Request that will be further used to retrieve the Request and its status information.&lt;/li&gt;     &lt;li&gt;The specification of the chosen authentication approach taking into account both the PISP and the PSU capabilities.&lt;/li&gt;     &lt;li&gt;In case of chosen REDIRECT authentication approach, the URL to be used by the PISP for redirecting the PSU in order to perform a authentication.&lt;/li&gt;   &lt;/ul&gt;   Case of the PSU neither gives nor denies his/her consent, the Request shall expire and is then rejected to the PISP. The expiration delay is specified by each ASPSP.&lt;br&gt;   &lt;h5&gt;Redirect authentication approach &lt;/h5&gt;     When the chosen authentication approach within the ASPSP answers is set to \&quot;REDIRECT\&quot;:&lt;br&gt;     &lt;ul&gt;       &lt;li&gt;The PISP redirects the PSU to the ASPSP which authenticates the PSU &lt;/li&gt;       &lt;li&gt;The ASPSP asks the PSU to give (or deny) his/her consent to the Payment Request&lt;/li&gt;       &lt;li&gt;The PSU chooses or confirms which of his/her accounts shall be used by the ASPSP for the future Credit Transfer.&lt;/li&gt;       &lt;li&gt;The ASPSP is then able to initiate the subsequent Credit Transfer&lt;/li&gt;       &lt;li&gt;The ASPSP redirects the PSU to the PISP using one of the call-back URLs provided within the posted Payment Request&lt;/li&gt;     &lt;/ul&gt;     &lt;img src&#x3D;\&quot;PISP Redirect Authentication.png\&quot; /&gt;     &lt;img src&#x3D;\&quot;PISP Redirect Authentication2.png\&quot; /&gt;   &lt;h5&gt;Decoupled authentication approach&lt;/h5&gt;     When the chosen authentication approach is \&quot;DECOUPLED\&quot;:&lt;br&gt;     &lt;ul&gt;       &lt;li&gt;Based on the PSU identifier provided within the Payment Request by the PISP, the ASPSP gives the PSU with the Payment Request details and challenges the PSU for a Strong Customer Authentication on a decoupled device or application.&lt;/li&gt;       &lt;li&gt;The PSU chooses or confirms which of his/her accounts shall be used by the ASPSP for the future Credit Transfer.&lt;/li&gt;       &lt;li&gt;The ASPSP is then able to initiate the subsequent Credit Transfer&lt;/li&gt;       &lt;li&gt;The ASPSP notifies the PISP about the finalisation of the authentication and consent process by using one of the call-back URLs provided within the posted Payment Request&lt;/li&gt;     &lt;/ul&gt;     &lt;img src&#x3D;\&quot;PISP Decoupled Authentication.png\&quot; /&gt;     &lt;img src&#x3D;\&quot;PISP Decoupled Authentication2.png\&quot; /&gt;   &lt;h5&gt;Embedded authentication approach&lt;/h5&gt;     When the chosen authentication approach within the ASPSP answers is set to \&quot;EMBEDDED\&quot;:&lt;br&gt;     &lt;ul&gt;       &lt;li&gt;The TPP informs the PSU that a challenge is needed for completing the Payment Request processing. This challenge will be one of the following:&lt;/li&gt;       &lt;ul&gt;         &lt;li&gt;A One-Time-Password sent by the ASPSP to the PSU on a separate device or application.&lt;/li&gt;         &lt;li&gt;A response computed by a specific device on base of a challenge sent by the ASPSP to the PSU on a separate device or application.&lt;/li&gt;       &lt;/ul&gt;       &lt;li&gt;The PSU unlock the device or application through a \&quot;knowledge factor\&quot; and/or an \&quot;inherence factor\&quot; (biometric), retrieves the Payment Request details and processes the data sent by the ASPSP; &lt;/li&gt;       &lt;li&gt;The PSU might choose or confirm which of his/her accounts shall be used by the ASPSP for the future Credit Transfer when the device or application allows it.&lt;/li&gt;       &lt;li&gt;When agreeing the Payment Request, the PSU enters the resulting authentication factor through the PISP interface which will forward it to the ASPSP through a confirmation request (cf. § 4.7)&lt;/li&gt;     &lt;/ul&gt;     &lt;img src&#x3D;\&quot;PISP Embedded Authentication.png\&quot; /&gt;     &lt;img src&#x3D;\&quot;PISP Embedded Authentication2.png\&quot; /&gt; 
   * 
   * Expected answers:
   *   code 201 : HalPaymentRequestCreation (The request has been created as a resource. The ASPSP must authenticate the PSU.)
   *              Headers :
   *                location - URI of the created (and updated if needed) Payment Request.  Actually, this link is the URI to be used (cf. § 4.6) for retrieving the Payment Request ant its status:   - GET /payment-requests/{paymentRequestResourceId} The parameter {paymentRequestResourceId} is the identifier of the Payment Request, as the resource that was created on the ASPSP server side.                         
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *                Digest - Digest of the body
   *                Signature - http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate. 
   *   code 400 : ErrorModel (Invalid status value)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 401 : ErrorModel (Unauthorized, authentication failure.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 403 : ErrorModel (Forbidden, authentication successful but access to resource is not allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 405 : ErrorModel (Method Not Allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 406 : ErrorModel (Not Acceptable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 408 : ErrorModel (Request Timeout.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 429 : ErrorModel (Too many requests.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 500 : ErrorModel (Internal server error.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 503 : ErrorModel (Service unavailable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   * 
   * @param authorization Access token to be passed as a header
   * @param paymentRequest ISO20022 based payment Initiation Request
   * @param signature http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate. 
   * @param xRequestID Correlation header to be set in a request and retrieved in the relevant response 
   * @param pSUIPAddress IP address used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUIPPort IP port used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUHTTPMethod Http method for the most relevant PSU’s terminal request to the TTP
   * @param pSUDate Timestamp of the most relevant PSU’s terminal request to the TTP
   * @param pSUGEOLocation Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP
   * @param pSUUserAgent \&quot;User-Agent\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUReferer \&quot;Referer\&quot; header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \&quot;referer\&quot; (incorrect spelling) is to be used. The correct spelling \&quot;referrer\&quot; can be used but might not be understood. 
   * @param pSUAccept \&quot;Accept\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptCharset \&quot;Accept-Charset\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptEncoding \&quot;Accept-Encoding\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptLanguage \&quot;Accept-Language\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of installation identification this ID need to be unaltered until removal from device. 
   * @param digest Digest of the body
   */
  def paymentRequestsPost(authorization: String, paymentRequest: PaymentRequestResource, signature: String, xRequestID: String, pSUIPAddress: Option[String] = None, pSUIPPort: Option[String] = None, pSUHTTPMethod: Option[String] = None, pSUDate: Option[String] = None, pSUGEOLocation: Option[String] = None, pSUUserAgent: Option[String] = None, pSUReferer: Option[String] = None, pSUAccept: Option[String] = None, pSUAcceptCharset: Option[String] = None, pSUAcceptEncoding: Option[String] = None, pSUAcceptLanguage: Option[String] = None, pSUDeviceID: Option[String] = None, digest: Option[String] = None): ApiRequest[HalPaymentRequestCreation] =
    ApiRequest[HalPaymentRequestCreation](ApiMethods.POST, "https://localhost/v1", "/payment-requests", "application/json")
      .withBody(paymentRequest)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("PSU-IP-Address", pSUIPAddress)
      .withHeaderParam("PSU-IP-Port", pSUIPPort)
      .withHeaderParam("PSU-HTTP-Method", pSUHTTPMethod)
      .withHeaderParam("PSU-Date", pSUDate)
      .withHeaderParam("PSU-GEO-Location", pSUGEOLocation)
      .withHeaderParam("PSU-User-Agent", pSUUserAgent)
      .withHeaderParam("PSU-Referer", pSUReferer)
      .withHeaderParam("PSU-Accept", pSUAccept)
      .withHeaderParam("PSU-Accept-Charset", pSUAcceptCharset)
      .withHeaderParam("PSU-Accept-Encoding", pSUAcceptEncoding)
      .withHeaderParam("PSU-Accept-Language", pSUAcceptLanguage)
      .withHeaderParam("PSU-Device-ID", pSUDeviceID)
      .withHeaderParam("Digest", digest)
      .withHeaderParam("Signature", signature)
      .withHeaderParam("X-Request-ID", xRequestID)
      .withSuccessResponse[HalPaymentRequestCreation](201)
      .withErrorResponse[ErrorModel](400)
      .withErrorResponse[ErrorModel](401)
      .withErrorResponse[ErrorModel](403)
      .withErrorResponse[ErrorModel](405)
      .withErrorResponse[ErrorModel](406)
      .withErrorResponse[ErrorModel](408)
      .withErrorResponse[ErrorModel](429)
      .withErrorResponse[ErrorModel](500)
      .withErrorResponse[ErrorModel](503)
      
  object PaymentRequestsPostHeaders { 
    def location(r: ApiReturnWithHeaders) = r.getStringHeader("location")
    def xRequestID(r: ApiReturnWithHeaders) = r.getStringHeader("X-Request-ID")
    def digest(r: ApiReturnWithHeaders) = r.getStringHeader("Digest")
    def signature(r: ApiReturnWithHeaders) = r.getStringHeader("Signature")
  }


}


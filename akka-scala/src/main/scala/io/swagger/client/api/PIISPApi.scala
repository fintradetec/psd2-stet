/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.ErrorModel
import io.swagger.client.model.HalPaymentCoverageReport
import io.swagger.client.model.PaymentCoverageRequestResource
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object PIISPApi {

  /**
   * &lt;h3&gt;Description&lt;/h3&gt; The PIISP can ask an ASPSP to check if a given amount can be covered by the liquidity that is available on a PSU cash account or payment card. &lt;h3&gt;Prerequisites&lt;/h3&gt; &lt;ul&gt;   &lt;li&gt;The TPP has been registered by the Registration Authority for the PIISP role&lt;/li&gt;   &lt;li&gt;The TPP and the PSU have a contract that has been registered by the ASPSP&lt;/li&gt;   &lt;ul&gt;     &lt;li&gt;At this step, the ASPSP has delivered an \&quot;Authorization Code\&quot;, a \&quot;Resource Owner Password\&quot; or a \&quot;Client Credential\&quot; OAUTH2 access token to the TPP (cf. § 3.4.2).&lt;/li&gt;     &lt;li&gt;Each ASPSP has to implement either the \&quot;Authorization Code\&quot;/\&quot;Resource Owner Password\&quot; or the \&quot;Client Credential\&quot; OAUTH2 access token model.&lt;/li&gt;     &lt;li&gt;Doing this, it will edit the [security] section on this path in order to specify which model it has chosen&lt;/li&gt;   &lt;/ul&gt;   &lt;li&gt;The TPP and the ASPSP have successfully processed a mutual check and authentication &lt;/li&gt;   &lt;li&gt;The TPP has presented its OAUTH2 \&quot;Authorization Code\&quot; or \&quot;Resource Owner Password\&quot; access token which allows the ASPSP to identify the relevant PSU.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Business flow&lt;/h3&gt; The PIISP requests the ASPSP for a payment coverage check against either a bank account or a card primary identifier. The ASPSP answers with a structure embedding the original request and the result as a Boolean.       
   * 
   * Expected answers:
   *   code 200 : HalPaymentCoverageReport (payment coverage request)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *                Digest - Digest of the body
   *                Signature - http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate. 
   *   code 400 : ErrorModel (Invalid status value)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 401 : ErrorModel (Unauthorized, authentication failure.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 403 : ErrorModel (Forbidden, authentication successful but access to resource is not allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 405 : ErrorModel (Method Not Allowed.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 406 : ErrorModel (Not Acceptable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 408 : ErrorModel (Request Timeout.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 429 : ErrorModel (Too many requests.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 500 : ErrorModel (Internal server error.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   *   code 503 : ErrorModel (Service unavailable.)
   *              Headers :
   *                X-Request-ID - Correlation header to be set in a request and retrieved in the relevant response 
   * 
   * @param authorization Access token to be passed as a header
   * @param paymentCoverage parameters of a payment coverage request
   * @param signature http-signature of the request (cf. https://datatracker.ietf.org/doc/draft-cavage-http-signatures/) The keyId must specify the way to get the relevant qualified certificate. It is requested that this identifier is an URL aiming to provide the relevant Qualified Certificate. 
   * @param xRequestID Correlation header to be set in a request and retrieved in the relevant response 
   * @param pSUIPAddress IP address used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUIPPort IP port used by the PSU&#39;s terminal when connecting to the TPP
   * @param pSUHTTPMethod Http method for the most relevant PSU’s terminal request to the TTP
   * @param pSUDate Timestamp of the most relevant PSU’s terminal request to the TTP
   * @param pSUGEOLocation Geographical location of the PSU as provided by the PSU mobile terminal if any to the TPP
   * @param pSUUserAgent \&quot;User-Agent\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUReferer \&quot;Referer\&quot; header field sent by the PSU terminal when connecting to the TPP. Notice that an initial typo in RFC 1945 specifies that \&quot;referer\&quot; (incorrect spelling) is to be used. The correct spelling \&quot;referrer\&quot; can be used but might not be understood. 
   * @param pSUAccept \&quot;Accept\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptCharset \&quot;Accept-Charset\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptEncoding \&quot;Accept-Encoding\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUAcceptLanguage \&quot;Accept-Language\&quot; header field sent by the PSU terminal when connecting to the TPP 
   * @param pSUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of installation identification this ID need to be unaltered until removal from device. 
   * @param digest Digest of the body
   */
  def fundsConfirmationsPost(authorization: String, paymentCoverage: PaymentCoverageRequestResource, signature: String, xRequestID: String, pSUIPAddress: Option[String] = None, pSUIPPort: Option[String] = None, pSUHTTPMethod: Option[String] = None, pSUDate: Option[String] = None, pSUGEOLocation: Option[String] = None, pSUUserAgent: Option[String] = None, pSUReferer: Option[String] = None, pSUAccept: Option[String] = None, pSUAcceptCharset: Option[String] = None, pSUAcceptEncoding: Option[String] = None, pSUAcceptLanguage: Option[String] = None, pSUDeviceID: Option[String] = None, digest: Option[String] = None): ApiRequest[HalPaymentCoverageReport] =
    ApiRequest[HalPaymentCoverageReport](ApiMethods.POST, "https://localhost/v1", "/funds-confirmations", "application/json")
      .withBody(paymentCoverage)
      .withHeaderParam("Authorization", authorization)
      .withHeaderParam("PSU-IP-Address", pSUIPAddress)
      .withHeaderParam("PSU-IP-Port", pSUIPPort)
      .withHeaderParam("PSU-HTTP-Method", pSUHTTPMethod)
      .withHeaderParam("PSU-Date", pSUDate)
      .withHeaderParam("PSU-GEO-Location", pSUGEOLocation)
      .withHeaderParam("PSU-User-Agent", pSUUserAgent)
      .withHeaderParam("PSU-Referer", pSUReferer)
      .withHeaderParam("PSU-Accept", pSUAccept)
      .withHeaderParam("PSU-Accept-Charset", pSUAcceptCharset)
      .withHeaderParam("PSU-Accept-Encoding", pSUAcceptEncoding)
      .withHeaderParam("PSU-Accept-Language", pSUAcceptLanguage)
      .withHeaderParam("PSU-Device-ID", pSUDeviceID)
      .withHeaderParam("Digest", digest)
      .withHeaderParam("Signature", signature)
      .withHeaderParam("X-Request-ID", xRequestID)
      .withSuccessResponse[HalPaymentCoverageReport](200)
      .withErrorResponse[ErrorModel](400)
      .withErrorResponse[ErrorModel](401)
      .withErrorResponse[ErrorModel](403)
      .withErrorResponse[ErrorModel](405)
      .withErrorResponse[ErrorModel](406)
      .withErrorResponse[ErrorModel](408)
      .withErrorResponse[ErrorModel](429)
      .withErrorResponse[ErrorModel](500)
      .withErrorResponse[ErrorModel](503)
      
  object FundsConfirmationsPostHeaders { 
    def xRequestID(r: ApiReturnWithHeaders) = r.getStringHeader("X-Request-ID")
    def digest(r: ApiReturnWithHeaders) = r.getStringHeader("Digest")
    def signature(r: ApiReturnWithHeaders) = r.getStringHeader("Signature")
  }


}

